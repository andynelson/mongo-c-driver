mongoc_write_concern(7)
=======================


NAME
----
mongoc_write_concern - MongoDB write concern abstraction


SYNOPSIS
--------

[source, c]
---------------
#include <mongoc.h>

mongoc_write_concern_t * write_concern;

write_concern = mongoc_write_concern_new ();
---------------


DESCRIPTION
-----------
_mongoc_write_concern_ provides an abstraction on top of the MongoDB connection
write concern.  It allows for hinting to the driver how durable writes should
be, both in replication as well as on a per node basis.

You can specify a read preference mode on connection objects, database objects,
collection objects, or per-operation.

WRITE CONCERN LEVELS
--------------------

NETWORK RELATED
~~~~~~~~~~~~~~~

These relate to *et_w() and *et_wmajority()

MONGOC_WRITE_CONCERN_W_DEFAULT (1)::
   With a receipt acknowledged write concern, the mongod confirms the receipt
   of the write operation. Acknowledged write concern allows clients to catch
   network, duplicate key, and other errors.
   
MONGOC_WRITE_CONCERN_W_ERRORS_IGNORED (-1)::
   With an errors ignored write concern, MongoDB does not acknowledge write
   operations. With this level of write concern, the client cannot detect
   failed write operations. These errors include connection errors and mongod
   exceptions such as duplicate key exceptions for unique indexes. Although the
   errors ignored write concern provides fast performance, this performance
   gain comes at the cost of significant risks for data persistence and
   durability.

MONGOC_WRITE_CONCERN_W_UNACKNOWLEDGED (0)::
   With an unacknowledged write concern, MongoDB does not acknowledge the
   receipt of write operation. Unacknowledged is similar to errors ignored;
   however, mongoc attempts to receive and handle network errors when possible.

MONGOC_WRITE_CONCERN_W_MAJORITY (majority)::
   Require that a write has been propagated to a majority of the nodes in the
   replica set.

n::
   Require that a write has been propagated to at least _n_ nodes in the
   replica set.


NODE PERSISTENCE
~~~~~~~~~~~~~~~~

fsync::
   Force a full linkmongoc:fsync[2] on the node receiving the write.

journal::
   Force a flush to the journal on the node receiving the write.


SEE ALSO
--------

FUNCTIONS
~~~~~~~~~

linkmongoc:mongoc_write_concern_copy[3]
linkmongoc:mongoc_write_concern_destroy[3]
linkmongoc:mongoc_write_concern_get_fsync[3]
linkmongoc:mongoc_write_concern_get_journal[3]
linkmongoc:mongoc_write_concern_get_w[3]
linkmongoc:mongoc_write_concern_get_wmajority[3]
linkmongoc:mongoc_write_concern_get_wtimeout[3]
linkmongoc:mongoc_write_concern_new[3]
linkmongoc:mongoc_write_concern_set_fsync[3]
linkmongoc:mongoc_write_concern_set_journal[3]
linkmongoc:mongoc_write_concern_set_w[3]
linkmongoc:mongoc_write_concern_set_wmajority[3]
linkmongoc:mongoc_write_concern_set_wtimeout[3]

RELATED
~~~~~~~

linkmongoc:mongoc_client[7]
http://docs.mongodb.org/manual/core/write-concern/


AUTHORS
-------

This page was written by MongoDB Inc.
